// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// SimulateTumor
Rcpp::List SimulateTumor(std::vector< double > birthrates, std::vector< double > deathrates, std::vector< double > mutation_rates, std::vector< unsigned int > clone_start_times, std::vector< int > fathers, int simulation_end_time, int seed, int number_clonal_mutations, double purity, double min_vaf, int depth, int depth_model, bool verbose);
RcppExport SEXP _TEMULATOR_SimulateTumor(SEXP birthratesSEXP, SEXP deathratesSEXP, SEXP mutation_ratesSEXP, SEXP clone_start_timesSEXP, SEXP fathersSEXP, SEXP simulation_end_timeSEXP, SEXP seedSEXP, SEXP number_clonal_mutationsSEXP, SEXP puritySEXP, SEXP min_vafSEXP, SEXP depthSEXP, SEXP depth_modelSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< double > >::type birthrates(birthratesSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type deathrates(deathratesSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type mutation_rates(mutation_ratesSEXP);
    Rcpp::traits::input_parameter< std::vector< unsigned int > >::type clone_start_times(clone_start_timesSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< int >::type simulation_end_time(simulation_end_timeSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_clonal_mutations(number_clonal_mutationsSEXP);
    Rcpp::traits::input_parameter< double >::type purity(puritySEXP);
    Rcpp::traits::input_parameter< double >::type min_vaf(min_vafSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type depth_model(depth_modelSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateTumor(birthrates, deathrates, mutation_rates, clone_start_times, fathers, simulation_end_time, seed, number_clonal_mutations, purity, min_vaf, depth, depth_model, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TEMULATOR_SimulateTumor", (DL_FUNC) &_TEMULATOR_SimulateTumor, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_TEMULATOR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
